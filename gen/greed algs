
Sure! Here is a list of some basic greedy algorithms that commonly appear in competitive programming questions:

1. Activity Selection: Select a maximum number of non-overlapping activities from a set, given their start and finish times.

2. Fractional Knapsack: Select items with maximum total value while staying within a given weight capacity.

3. Coin Change: Find the minimum number of coins needed to make a given amount, using a predefined set of coin denominations.

4. Huffman Coding: Construct an optimal binary prefix code for a set of symbols, minimizing the total encoded length.

5. Minimum Spanning Tree (MST): Find the smallest connected subgraph that connects all vertices of a given graph with the minimum possible total edge weight.

6. Dijkstra's Algorithm: Find the shortest paths from a single source to all other vertices in a weighted graph with non-negative edge weights.

7. Prim's Algorithm: Find the minimum spanning tree of a connected, undirected graph with non-negative edge weights.

8. Kruskal's Algorithm: Find the minimum spanning tree of a connected, undirected graph using a disjoint-set data structure.

9. Interval Scheduling: Schedule tasks or events to maximize the number of non-overlapping intervals.

10. Greedy Coloring: Assign colors to vertices of a graph with minimum number of colors, such that no two adjacent vertices have the same color.

11. Largest Number: Given a list of non-negative integers, form the largest number possible by concatenating them.

12. Activity Scheduling on Multiple Machines: Schedule tasks on multiple machines to minimize the overall completion time.

These are just a few examples of basic greedy algorithms. In competitive programming, 
you might encounter various other problems where greedy strategies can be applied effectively. 
Remember to analyze the problem constraints and requirements carefully to determine if a
greedy approach is suitable. Greedy algorithms usually involve making locally optimal choices at each step to achieve a global optimum. Happy coding!
