1.Check if a number is Power of 2 :----  if(!(x&(x-1)))

2.Swap two nos(a and b):---- a=a^b
                             b=b^a;
                             a=a^b;

3.Set the kth Bit:----  x | (1<<k)

4.Unset the kth Bit:----  x & ~(1<<k)

5.Toggle kth bit:----  x ^ (1<<k)

6.Check if kth Bit is set:----  x & (1<<k)

__builtin_popcount(unsigned int) returns the number of set bits (__builtin_popcount(0b0001'0010'1100) == 4)
__builtin_ffs(int) finds the index of the first (most right) set bit (__builtin_ffs(0b0001'0010'1100) == 3)
__builtin_clz(unsigned int) the count of leading zeros (__builtin_clz(0b0001'0010'1100) == 23)
__builtin_ctz(unsigned int) the count of trailing zeros (__builtin_ctz(0b0001'0010'1100) == 2)
